#!/usr/bin/env python3

import os
import rospy
import sys
import time
import random
import threading
from librosshow.getch import Getch

from sensor_msgs.msg import Image

from librosshow.viewers.sensor_msgs.LaserScanViewer import LaserScanViewer
from sensor_msgs.msg import LaserScan

VIEWER_MAPPING = {
  "std_msgs/Float32": ("librosshow.viewers.generic.SinglePlotViewer", "SinglePlotViewer"),
  "std_msgs/Float64": ("librosshow.viewers.generic.SinglePlotViewer", "SinglePlotViewer"),
  "std_msgs/Int8": ("librosshow.viewers.generic.SinglePlotViewer", "SinglePlotViewer"),
  "std_msgs/Int16": ("librosshow.viewers.generic.SinglePlotViewer", "SinglePlotViewer"),
  "std_msgs/Int32": ("librosshow.viewers.generic.SinglePlotViewer", "SinglePlotViewer"),
  "std_msgs/Int64": ("librosshow.viewers.generic.SinglePlotViewer", "SinglePlotViewer"),
  "std_msgs/UInt8": ("librosshow.viewers.generic.SinglePlotViewer", "SinglePlotViewer"),
  "std_msgs/UInt16": ("librosshow.viewers.generic.SinglePlotViewer", "SinglePlotViewer"),
  "std_msgs/UInt32": ("librosshow.viewers.generic.SinglePlotViewer", "SinglePlotViewer"),
  "std_msgs/UInt64": ("librosshow.viewers.generic.SinglePlotViewer", "SinglePlotViewer"),
  "sensor_msgs/LaserScan": ("librosshow.viewers.sensor_msgs.LaserScanViewer", "LaserScanViewer"),
  "sensor_msgs/Imu": ("librosshow.viewers.sensor_msgs.ImuViewer", "ImuViewer"),
  "sensor_msgs/CompressedImage": ("librosshow.viewers.sensor_msgs.CompressedImageViewer", "CompressedImageViewer"),
  "sensor_msgs/Image": ("librosshow.viewers.sensor_msgs.ImageViewer", "ImageViewer"),
  "sensor_msgs/NavSatFix": ("librosshow.viewers.sensor_msgs.NavSatFixViewer", "NavSatFixViewer"),
}

def capture_key_loop():
    getch = Getch()
    while True:
        c = getch()
        if c == '\x03': # Ctrl+C
            rospy.signal_shutdown("Ctrl+C pressed")
        else:
            if "keypress" in dir(viewer):
                viewer.keypress(c)

if __name__ == "__main__":
    if len(sys.argv) <= 1:
        print("Usage: rosshow <topic>")
        sys.exit(0)

    TOPIC = sys.argv[1]
    topic_types = dict(rospy.get_published_topics())
    if TOPIC not in topic_types:
        print("Topic {0} does not appear to be published yet.".format(TOPIC))
        sys.exit(0)

    rospy.init_node('rosshow_' + str(random.randint(10000,99999)))

    if topic_types[TOPIC] not in VIEWER_MAPPING:
        print("Unsupported message type.")
        exit()

    module_name, class_name = VIEWER_MAPPING[topic_types[TOPIC]]
    viewer_class = getattr(__import__(module_name, fromlist=(class_name)), class_name)
    viewer = viewer_class()

    message_package, message_name = topic_types[TOPIC].split("/", 2)
    message_class = getattr(__import__(message_package + ".msg", fromlist=(message_name)), message_name)

    rospy.Subscriber(TOPIC, message_class, viewer.update)

    threading.Thread(target = capture_key_loop, daemon = True).start()

    rate = rospy.Rate(15)
    while not rospy.is_shutdown():
        rate.sleep()
        viewer.draw()

